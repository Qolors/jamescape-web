import type { Session, User } from '@clerk/backend-core';
import { ClerkJWTClaims, ServerGetToken } from '@clerk/types';
import type { NextFetchEvent, NextRequest, NextResponse } from 'next/server';
export declare type WithEdgeMiddlewareAuthOptions = {
    loadUser?: boolean;
    loadSession?: boolean;
    authorizedParties?: string[];
    jwtKey?: string;
    strict?: boolean;
};
export declare type WithEdgeMiddlewareAuthCallback<Return, Options> = (req: RequestWithAuth<Options>, event: NextFetchEvent) => Return;
export declare type WithEdgeMiddlewareAuthMiddlewareResult<CallbackReturn, Options> = (req: RequestWithAuth<Options>, event: NextFetchEvent) => Promise<Awaited<CallbackReturn>>;
export declare type Awaited<T> = T extends PromiseLike<infer U> ? U : T;
export declare type RequestWithAuth<Options extends WithEdgeMiddlewareAuthOptions = any> = NextRequest & {
    auth: EdgeMiddlewareAuth;
} & (Options extends {
    loadSession: true;
} ? {
    session: Session | null;
} : {}) & (Options extends {
    loadUser: true;
} ? {
    user: User | null;
} : {});
declare type NextMiddlewareReturnOptions = NextResponse | Response | null | undefined;
export declare type NextMiddlewareResult = NextMiddlewareReturnOptions;
export declare type WithAuthNextMiddlewareHandler<Options> = (req: RequestWithAuth<Options>, event: NextFetchEvent) => NextMiddlewareResult | Promise<NextMiddlewareResult>;
export declare type EdgeMiddlewareAuth = {
    sessionId: string | null;
    userId: string | null;
    getToken: ServerGetToken;
    claims: ClerkJWTClaims | null;
};
export declare type AuthData = {
    sessionId: string | null;
    session: Session | undefined | null;
    userId: string | null;
    user: User | undefined | null;
    getToken: ServerGetToken;
    claims: ClerkJWTClaims | null;
};
export {};
//# sourceMappingURL=types.d.ts.map