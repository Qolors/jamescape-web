"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireEdgeMiddlewareAuth = exports.withEdgeMiddlewareAuth = exports.users = exports.smsMessages = exports.sessions = exports.organizations = exports.invitations = exports.emails = exports.clients = exports.allowlistIdentifiers = exports.verifySessionToken = void 0;
const backend_core_1 = require("@clerk/backend-core");
const ClerkAPI_1 = require("./ClerkAPI");
const injectAuthIntoRequest_1 = require("./utils/injectAuthIntoRequest");
const responses_1 = require("./utils/responses");
const importKey = async (jwk, algorithm) => {
    return await crypto.subtle.importKey('jwk', jwk, algorithm, true, ['verify']);
};
const verifySignature = async (algorithm, key, signature, data) => {
    return await crypto.subtle.verify(algorithm, key, signature, data);
};
const decodeBase64 = (base64) => atob(base64);
const vercelEdgeBase = new backend_core_1.Base(importKey, verifySignature, decodeBase64);
exports.verifySessionToken = vercelEdgeBase.verifySessionToken;
const allowlistIdentifiers = ClerkAPI_1.ClerkAPI.allowlistIdentifiers;
exports.allowlistIdentifiers = allowlistIdentifiers;
const clients = ClerkAPI_1.ClerkAPI.clients;
exports.clients = clients;
const emails = ClerkAPI_1.ClerkAPI.emails;
exports.emails = emails;
const invitations = ClerkAPI_1.ClerkAPI.invitations;
exports.invitations = invitations;
const organizations = ClerkAPI_1.ClerkAPI.organizations;
exports.organizations = organizations;
const sessions = ClerkAPI_1.ClerkAPI.sessions;
exports.sessions = sessions;
const smsMessages = ClerkAPI_1.ClerkAPI.smsMessages;
exports.smsMessages = smsMessages;
const users = ClerkAPI_1.ClerkAPI.users;
exports.users = users;
async function fetchInterstitial() {
    return ClerkAPI_1.ClerkAPI.fetchInterstitial();
}
function withEdgeMiddlewareAuth(handler, options = {
    loadSession: false,
    loadUser: false,
    strict: false,
}) {
    return vercelMiddlewareAuth(handler, { strict: false, ...options });
}
exports.withEdgeMiddlewareAuth = withEdgeMiddlewareAuth;
function requireEdgeMiddlewareAuth(handler, options = {
    loadSession: false,
    loadUser: false,
}) {
    return vercelMiddlewareAuth(handler, { strict: true, ...options });
}
exports.requireEdgeMiddlewareAuth = requireEdgeMiddlewareAuth;
function vercelMiddlewareAuth(handler, options = {
    loadSession: false,
    loadUser: false,
}) {
    return async function clerkAuth(req, event) {
        const { loadUser, loadSession, jwtKey, authorizedParties } = options;
        const cookieToken = getCookie(req.cookies, '__session');
        const clientUat = getCookie(req.cookies, '__client_uat');
        const headerToken = req.headers.get('authorization');
        const { status, interstitial, sessionClaims, errorReason } = await vercelEdgeBase.getAuthState({
            cookieToken,
            headerToken,
            clientUat,
            origin: req.headers.get('origin'),
            host: req.headers.get('host'),
            userAgent: req.headers.get('user-agent'),
            forwardedPort: req.headers.get('x-forwarded-port'),
            forwardedHost: req.headers.get('x-forwarded-host'),
            referrer: req.headers.get('referrer'),
            authorizedParties,
            jwtKey,
            fetchInterstitial,
        });
        if (status === backend_core_1.AuthStatus.Interstitial) {
            return (0, responses_1.interstitialResponse)(interstitial, errorReason);
        }
        if (status === backend_core_1.AuthStatus.SignedOut) {
            if (options.strict) {
                return (0, responses_1.signedOutResponse)(errorReason);
            }
            const response = (await handler((0, injectAuthIntoRequest_1.injectAuthIntoRequest)(req, (0, backend_core_1.createSignedOutState)()), event));
            response === null || response === void 0 ? void 0 : response.headers.set('Auth-Result', errorReason || '');
            return response;
        }
        const sessionId = sessionClaims.sid;
        const userId = sessionClaims.sub;
        const [user, session] = await Promise.all([
            loadUser ? ClerkAPI_1.ClerkAPI.users.getUser(userId) : Promise.resolve(undefined),
            loadSession ? ClerkAPI_1.ClerkAPI.sessions.getSession(sessionId) : Promise.resolve(undefined),
        ]);
        const getToken = (0, backend_core_1.createGetToken)({
            sessionId,
            cookieToken,
            headerToken: headerToken || '',
            fetcher: (...args) => ClerkAPI_1.ClerkAPI.sessions.getToken(...args),
        });
        const authRequest = (0, injectAuthIntoRequest_1.injectAuthIntoRequest)(req, {
            user,
            session,
            sessionId,
            userId,
            getToken,
            claims: sessionClaims,
        });
        return handler(authRequest, event);
    };
}
function getCookie(cookies, name) {
    if (typeof cookies.get === 'function') {
        return cookies.get(name);
    }
    else {
        return cookies[name];
    }
}
