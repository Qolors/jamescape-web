import { ClerkJWTClaims } from '@clerk/types';
import { NextMiddlewareResult, WithEdgeMiddlewareAuthCallback, WithEdgeMiddlewareAuthMiddlewareResult, WithEdgeMiddlewareAuthOptions } from './types';
export declare const verifySessionToken: (token: string, { authorizedParties, jwtKey }?: import("@clerk/backend-core/dist/cjs/types").VerifySessionTokenOptions | undefined) => Promise<ClerkJWTClaims>;
declare const allowlistIdentifiers: import("@clerk/backend-core/dist/cjs/api/endpoints").AllowlistIdentifierAPI;
declare const clients: import("@clerk/backend-core/dist/cjs/api/endpoints").ClientAPI;
declare const emails: import("@clerk/backend-core/dist/cjs/api/endpoints").EmailAPI;
declare const invitations: import("@clerk/backend-core/dist/cjs/api/endpoints").InvitationAPI;
declare const organizations: import("@clerk/backend-core/dist/cjs/api/endpoints").OrganizationAPI;
declare const sessions: import("@clerk/backend-core/dist/cjs/api/endpoints").SessionAPI;
declare const smsMessages: import("@clerk/backend-core/dist/cjs/api/endpoints").SMSMessageAPI;
declare const users: import("@clerk/backend-core/dist/cjs/api/endpoints").UserAPI;
export { allowlistIdentifiers, clients, emails, invitations, organizations, sessions, smsMessages, users };
export declare function withEdgeMiddlewareAuth<CallbackReturn extends NextMiddlewareResult | Promise<NextMiddlewareResult>, Options extends WithEdgeMiddlewareAuthOptions>(handler: WithEdgeMiddlewareAuthCallback<CallbackReturn, Options>, options?: Options): WithEdgeMiddlewareAuthMiddlewareResult<CallbackReturn, Options>;
export declare function requireEdgeMiddlewareAuth(handler: any, options?: any): any;
//# sourceMappingURL=index.d.ts.map