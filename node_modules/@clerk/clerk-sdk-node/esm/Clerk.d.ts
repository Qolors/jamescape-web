import { Base, ClerkAPIResponseError, ClerkBackendAPI } from '@clerk/backend-core';
import { ClerkJWTClaims, ServerGetToken } from '@clerk/types';
import type { NextFunction, Request, Response } from 'express';
import { JwksClient } from 'jwks-rsa';
import { RequestInit } from 'node-fetch';
export declare type LooseAuthProp = {
    auth: {
        sessionId: string | null;
        userId: string | null;
        getToken: ServerGetToken;
        claims: ClerkJWTClaims | null;
    };
};
export declare type WithAuthProp<T> = T & LooseAuthProp;
export declare type StrictAuthProp = {
    auth: {
        sessionId: string;
        userId: string;
        getToken: ServerGetToken;
        claims: ClerkJWTClaims;
    };
};
export declare type RequireAuthProp<T> = T & StrictAuthProp;
declare type MiddlewareWithAuthProp = (req: WithAuthProp<Request>, res: Response, next: NextFunction) => Promise<void>;
declare type MiddlewareRequireAuthProp = (req: RequireAuthProp<Request>, res: Response, next: NextFunction) => Promise<void>;
export declare type Middleware = MiddlewareWithAuthProp | MiddlewareRequireAuthProp;
declare type MiddlewareOptionsInLooseMode = {
    onError?: (error: ClerkAPIResponseError) => unknown;
    authorizedParties?: string[];
    jwtKey?: string;
    strict?: boolean;
};
declare type MiddlewareOptionsInStrictMode = MiddlewareOptionsInLooseMode & {
    strict: true;
};
export declare type MiddlewareOptions = MiddlewareOptionsInLooseMode | MiddlewareOptionsInStrictMode;
export default class Clerk extends ClerkBackendAPI {
    base: Base;
    jwtKey?: string;
    httpOptions: RequestInit;
    _jwksClient: JwksClient;
    static _instance: Clerk;
    constructor({ apiKey, jwtKey, apiUrl, apiVersion, httpOptions, jwksCacheMaxAge, }?: {
        apiKey?: string;
        jwtKey?: string;
        apiUrl?: string;
        apiVersion?: string;
        httpOptions?: RequestInit;
        jwksCacheMaxAge?: number;
    });
    verifyToken(token: string, authorizedParties?: string[]): Promise<ClerkJWTClaims>;
    static getInstance(): Clerk;
    private logError;
    private authenticate;
    expressWithAuth(options?: {}): MiddlewareWithAuthProp;
    expressRequireAuth(options?: {}): MiddlewareRequireAuthProp;
}
export {};
//# sourceMappingURL=Clerk.d.ts.map