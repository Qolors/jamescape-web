/// <reference types="qs" />
/// <reference types="express" />
import type { RequestInit } from 'node-fetch';
import Clerk from './instance';
declare const singletonInstance: Clerk;
declare const allowlistIdentifiers: import("@clerk/backend-core/dist/cjs/api/endpoints").AllowlistIdentifierAPI;
declare const clients: import("@clerk/backend-core/dist/cjs/api/endpoints").ClientAPI;
declare const emails: import("@clerk/backend-core/dist/cjs/api/endpoints").EmailAPI;
declare const invitations: import("@clerk/backend-core/dist/cjs/api/endpoints").InvitationAPI;
declare const organizations: import("@clerk/backend-core/dist/cjs/api/endpoints").OrganizationAPI;
declare const sessions: import("@clerk/backend-core/dist/cjs/api/endpoints").SessionAPI;
declare const smsMessages: import("@clerk/backend-core/dist/cjs/api/endpoints").SMSMessageAPI;
declare const users: import("@clerk/backend-core/dist/cjs/api/endpoints").UserAPI;
export default singletonInstance;
export { allowlistIdentifiers, clients, emails, invitations, organizations, sessions, smsMessages, users, };
export { AllowlistIdentifier, Client, Email, EmailAddress, ExternalAccount, IdentificationLink, Invitation, Organization, OrganizationInvitation, OrganizationMembership, OrganizationMembershipPublicUserData, PhoneNumber, Session, SMSMessage, User, Verification, } from './instance';
declare const ClerkExpressWithAuth: (options?: {}) => (req: import("./Clerk").WithAuthProp<import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>>, res: import("express").Response<any, Record<string, any>>, next: import("express").NextFunction) => Promise<void>;
declare const ClerkExpressRequireAuth: (options?: {}) => (req: import("./Clerk").RequireAuthProp<import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>>, res: import("express").Response<any, Record<string, any>>, next: import("express").NextFunction) => Promise<void>;
export { ClerkExpressWithAuth, ClerkExpressRequireAuth };
export { LooseAuthProp, StrictAuthProp, WithAuthProp, RequireAuthProp, Middleware as ClerkMiddleware, MiddlewareOptions as ClerkMiddlewareOptions, } from './Clerk';
export declare function setClerkApiKey(value: string): void;
export declare function setClerkServerApiUrl(value: string): void;
export declare function setClerkApiVersion(value: string): void;
export declare function setClerkHttpOptions(value: RequestInit): void;
//# sourceMappingURL=index.d.ts.map