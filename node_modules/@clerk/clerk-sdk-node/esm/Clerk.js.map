{"version":3,"file":"Clerk.js","sourceRoot":"","sources":["../src/Clerk.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  APIRequestOptions,\n  AuthStatus,\n  Base,\n  ClerkAPIResponseError,\n  ClerkBackendAPI,\n  createGetToken,\n  createSignedOutState,\n  Logger,\n} from '@clerk/backend-core';\nimport { ClerkJWTClaims, ServerGetToken } from '@clerk/types';\nimport Cookies from 'cookies';\nimport deepmerge from 'deepmerge';\nimport type { NextFunction, Request, Response } from 'express';\nimport jwt from 'jsonwebtoken';\nimport jwks, { JwksClient } from 'jwks-rsa';\nimport fetch, { RequestInit } from 'node-fetch';\n\nimport { SupportMessages } from './constants/SupportMessages';\nimport { LIB_NAME, LIB_VERSION } from './info';\nimport {\n  decodeBase64,\n  importJSONWebKey,\n  importPKIKey,\n  verifySignature,\n} from './utils';\n\nconst defaultApiKey = process.env.CLERK_API_KEY || '';\nconst defaultJWTKey = process.env.CLERK_JWT_KEY;\nconst defaultApiVersion = process.env.CLERK_API_VERSION || 'v1';\nconst defaultServerApiUrl =\n  process.env.CLERK_API_URL || 'https://api.clerk.dev';\nconst JWKS_MAX_AGE = 3600000; // 1 hour\n\nexport type LooseAuthProp = {\n  auth: {\n    sessionId: string | null;\n    userId: string | null;\n    getToken: ServerGetToken;\n    claims: ClerkJWTClaims | null;\n  };\n};\n\nexport type WithAuthProp<T> = T & LooseAuthProp;\n\nexport type StrictAuthProp = {\n  auth: {\n    sessionId: string;\n    userId: string;\n    getToken: ServerGetToken;\n    claims: ClerkJWTClaims;\n  };\n};\n\nexport type RequireAuthProp<T> = T & StrictAuthProp;\n\ntype MiddlewareWithAuthProp = (\n  req: WithAuthProp<Request>,\n  res: Response,\n  next: NextFunction\n) => Promise<void>;\n\ntype MiddlewareRequireAuthProp = (\n  req: RequireAuthProp<Request>,\n  res: Response,\n  next: NextFunction\n) => Promise<void>;\n\nexport type Middleware = MiddlewareWithAuthProp | MiddlewareRequireAuthProp;\n\ntype MiddlewareOptionsInLooseMode = {\n  onError?: (error: ClerkAPIResponseError) => unknown;\n  authorizedParties?: string[];\n  jwtKey?: string;\n  strict?: boolean;\n};\n\ntype MiddlewareOptionsInStrictMode = MiddlewareOptionsInLooseMode & {\n  strict: true;\n};\n\nexport type MiddlewareOptions =\n  | MiddlewareOptionsInLooseMode\n  | MiddlewareOptionsInStrictMode;\n\ntype MiddlewareReturnType<T> = T extends MiddlewareOptionsInStrictMode\n  ? MiddlewareRequireAuthProp\n  : MiddlewareWithAuthProp;\n\nexport default class Clerk extends ClerkBackendAPI {\n  base: Base;\n  jwtKey?: string;\n  httpOptions: RequestInit;\n\n  _jwksClient: JwksClient;\n\n  // singleton instance\n  static _instance: Clerk;\n\n  constructor({\n    apiKey = defaultApiKey,\n    jwtKey = defaultJWTKey,\n    apiUrl = defaultServerApiUrl,\n    apiVersion = defaultApiVersion,\n    httpOptions = {},\n    jwksCacheMaxAge = JWKS_MAX_AGE,\n  }: {\n    apiKey?: string;\n    jwtKey?: string;\n    apiUrl?: string;\n    apiVersion?: string;\n    httpOptions?: RequestInit;\n    jwksCacheMaxAge?: number;\n  } = {}) {\n    super({\n      apiKey,\n      apiVersion,\n      apiUrl,\n      libName: LIB_NAME,\n      libVersion: LIB_VERSION,\n      apiClient: {\n        async request<T>(options: APIRequestOptions) {\n          const { url, method, queryParams, headerParams, bodyParams } =\n            options;\n          // Build final URL with search parameters\n          const finalUrl = new URL(url || '');\n\n          if (queryParams) {\n            for (const [key, val] of Object.entries(\n              queryParams as Record<string, string | string[]>\n            )) {\n              // Support array values for queryParams such as { foo: [42, 43] }\n              if (val) {\n                [val]\n                  .flat()\n                  .forEach((v) => finalUrl.searchParams.append(key, v));\n              }\n            }\n          }\n\n          const response = await fetch(\n            finalUrl.href,\n            deepmerge(httpOptions, {\n              method,\n              headers: headerParams as Record<string, string>,\n              ...(bodyParams &&\n                Object.keys(bodyParams).length > 0 && {\n                  body: JSON.stringify(bodyParams),\n                }),\n            })\n          );\n\n          // Parse JSON or Text response.\n          const isJSONResponse =\n            headerParams && headerParams['Content-Type'] === 'application/json';\n          const data = (await (isJSONResponse\n            ? response.json()\n            : response.text())) as T;\n\n          // Check for errors\n          if (!response.ok) {\n            throw new ClerkAPIResponseError(response.statusText, {\n              data: (data as any)?.errors || data,\n              status: response.status,\n            });\n          }\n\n          return data;\n        },\n      },\n    });\n\n    if (!apiKey) {\n      throw Error(SupportMessages.API_KEY_NOT_FOUND);\n    }\n\n    this.httpOptions = httpOptions;\n    this.jwtKey = jwtKey;\n\n    this._jwksClient = jwks({\n      jwksUri: `${apiUrl}/${apiVersion}/jwks`,\n      requestHeaders: {\n        Authorization: `Bearer ${apiKey}`,\n      },\n      timeout: 5000,\n      cache: true,\n      cacheMaxAge: jwksCacheMaxAge,\n    });\n\n    const loadCryptoKey = async (token: string) => {\n      const decoded = jwt.decode(token, { complete: true });\n      if (!decoded) {\n        throw new Error(`Failed to decode token: ${token}`);\n      }\n\n      const signingKey = await this._jwksClient.getSigningKey(\n        decoded.header.kid\n      );\n      const publicKey = signingKey.getPublicKey();\n\n      return importPKIKey(publicKey);\n    };\n\n    /** Base initialization */\n    // TODO: More comprehensive base initialization\n    this.base = new Base(\n      importJSONWebKey,\n      verifySignature,\n      decodeBase64,\n      loadCryptoKey\n    );\n  }\n\n  async verifyToken(\n    token: string,\n    authorizedParties?: string[]\n  ): Promise<ClerkJWTClaims> {\n    const decoded = jwt.decode(token, { complete: true });\n    if (!decoded) {\n      throw new Error(`Failed to verify token: ${token}`);\n    }\n\n    const key = await this._jwksClient.getSigningKey(decoded.header.kid);\n    const verified = jwt.verify(token, key.getPublicKey(), {\n      algorithms: ['RS256'],\n    }) as ClerkJWTClaims;\n\n    if (typeof verified === 'string') {\n      throw new Error('Malformed token');\n    }\n\n    if (!verified.iss || !verified.iss.startsWith('https://clerk')) {\n      throw new Error(`Issuer is invalid: ${verified.iss}`);\n    }\n\n    if (verified.azp && authorizedParties && authorizedParties.length > 0) {\n      if (!authorizedParties.includes(verified.azp)) {\n        throw new Error(`Authorized party is invalid: ${verified.azp}`);\n      }\n    }\n\n    return verified;\n  }\n\n  // For use as singleton, always returns the same instance\n  static getInstance(): Clerk {\n    if (!this._instance) {\n      this._instance = new Clerk();\n    }\n\n    return this._instance;\n  }\n\n  private logError(error: ClerkAPIResponseError | Error, strict = false) {\n    const logLevel = strict ? 'error' : 'warn';\n    Logger[logLevel](error.message);\n\n    if (error instanceof ClerkAPIResponseError) {\n      (error.errors || []).forEach(({ message, longMessage }) =>\n        Logger[logLevel](longMessage || message)\n      );\n    }\n  }\n\n  private authenticate<T extends MiddlewareOptions>(\n    options: T\n  ): MiddlewareReturnType<T> {\n    const { onError, authorizedParties, jwtKey, strict } = options;\n\n    async function doAuthenticate(\n      this: Clerk,\n      req: Request,\n      res: Response,\n      next: NextFunction\n    ): Promise<void> {\n      try {\n        const cookies = new Cookies(req, res);\n        const cookieToken = cookies.get('__session') as string;\n        const headerToken = req.headers.authorization?.replace('Bearer ', '');\n\n        const { status, interstitial, sessionClaims, errorReason } =\n          await this.base.getAuthState({\n            cookieToken,\n            headerToken,\n            clientUat: cookies.get('__client_uat') as string,\n            origin: req.headers.origin,\n            host: req.headers.host as string,\n            forwardedPort: req.headers['x-forwarded-port'] as string,\n            forwardedHost: req.headers['x-forwarded-host'] as string,\n            referrer: req.headers.referer,\n            userAgent: req.headers['user-agent'] as string,\n            authorizedParties,\n            jwtKey: jwtKey || this.jwtKey,\n            fetchInterstitial: () => this.fetchInterstitial(),\n          });\n\n        errorReason && res.setHeader('Auth-Result', errorReason);\n\n        if (status === AuthStatus.SignedOut) {\n          throw new Error('Unauthenticated');\n        }\n\n        if (status === AuthStatus.SignedIn) {\n          // @ts-expect-error\n          req.auth = {\n            sessionId: sessionClaims?.sid,\n            userId: sessionClaims?.sub,\n            getToken: createGetToken({\n              headerToken,\n              cookieToken,\n              sessionId: sessionClaims?.sid,\n              fetcher: (...args) => this.sessions.getToken(...args),\n            }),\n            claims: sessionClaims,\n          } as RequireAuthProp<Request>;\n\n          return next();\n        }\n\n        res.writeHead(401, { 'Content-Type': 'text/html' });\n        res.write(interstitial);\n        res.end();\n      } catch (error) {\n        // Auth object will be set to the signed out auth state\n        // @ts-expect-error\n        req.auth = {\n          userId: null,\n          sessionId: null,\n          getToken: createSignedOutState().getToken,\n          claims: null,\n        } as WithAuthProp<Request>;\n\n        this.logError(error as any, strict);\n        const err = onError ? await onError(error as any) : error;\n\n        // If strict, err will be returned to the Express-like `next` callback to signify an error should halt the request chain\n        if (strict) {\n          next(err);\n        } else {\n          next();\n        }\n      }\n    }\n\n    return doAuthenticate.bind(this);\n  }\n\n  // Connect/Express middlewares\n\n  expressWithAuth(options = {}) {\n    return this.authenticate({ strict: false, ...options });\n  }\n\n  expressRequireAuth(options = {}) {\n    return this.authenticate({ strict: true, ...options });\n  }\n}\n"]}