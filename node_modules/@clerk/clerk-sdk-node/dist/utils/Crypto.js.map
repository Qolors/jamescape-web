{"version":3,"file":"Crypto.js","sourceRoot":"","sources":["../../src/utils/Crypto.ts"],"names":[],"mappings":";;;AAAA,mDAAwD;AAExD,yCAAkD;AAErC,QAAA,MAAM,GAAG,IAAI,kBAAM,EAAE,CAAC;AAEnC,6DAA6D;AAC7D,SAAgB,SAAS,CAAC,GAAW;IACnC,MAAM,SAAS,GAAG,4BAA4B,CAAC;IAC/C,MAAM,SAAS,GAAG,0BAA0B,CAAC;IAC7C,MAAM,WAAW,GAAG,GAAG,CAAC,SAAS,CAC/B,SAAS,CAAC,MAAM,EAChB,GAAG,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAC9B,CAAC;IACF,MAAM,eAAe,GAAG,IAAA,uBAAY,EAAC,WAAW,CAAC,CAAC;IAClD,OAAO,IAAA,iBAAM,EAAC,eAAe,CAAC,CAAC;AACjC,CAAC;AATD,8BASC;AAEM,KAAK,UAAU,YAAY,CAAC,SAAiB;IAClD,OAAO,cAAM,CAAC,MAAM,CAAC,SAAS,CAC5B,MAAM,EACN,SAAS,CAAC,SAAS,CAAC,EACpB;QACE,IAAI,EAAE,mBAAmB;QACzB,IAAI,EAAE,SAAS;KAChB,EACD,IAAI,EACJ,CAAC,QAAQ,CAAC,CACX,CAAC;AACJ,CAAC;AAXD,oCAWC;AAEM,KAAK,UAAU,gBAAgB,CAAC,GAAe,EAAE,SAAoB;IAC1E,OAAO,MAAM,cAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChF,CAAC;AAFD,4CAEC;AAEM,KAAK,UAAU,eAAe,CACnC,SAAoB,EACpB,GAAc,EACd,SAAqB,EACrB,IAAgB;IAEhB,OAAO,cAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AAC/D,CAAC;AAPD,0CAOC","sourcesContent":["import { Crypto, CryptoKey } from '@peculiar/webcrypto';\n\nimport { decodeBase64, str2ab } from './Encoding';\n\nexport const crypto = new Crypto();\n\n// toSPKIDer converts a PEM encoded Public Key to DER encoded\nexport function toSPKIDer(pem: string): ArrayBuffer {\n  const pemHeader = '-----BEGIN PUBLIC KEY-----';\n  const pemFooter = '-----END PUBLIC KEY-----';\n  const pemContents = pem.substring(\n    pemHeader.length,\n    pem.length - pemFooter.length\n  );\n  const binaryDerString = decodeBase64(pemContents);\n  return str2ab(binaryDerString);\n}\n\nexport async function importPKIKey(publicKey: string) {\n  return crypto.subtle.importKey(\n    'spki',\n    toSPKIDer(publicKey),\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: 'SHA-256',\n    },\n    true,\n    ['verify']\n  );\n}\n\nexport async function importJSONWebKey(jwk: JsonWebKey, algorithm: Algorithm) {\n  return await crypto.subtle.importKey('jwk', jwk, algorithm, true, ['verify']);\n}\n\nexport async function verifySignature(\n  algorithm: Algorithm,\n  key: CryptoKey,\n  signature: Uint8Array,\n  data: Uint8Array\n) {\n  return crypto.subtle.verify(algorithm, key, signature, data);\n}\n"]}