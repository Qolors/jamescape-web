import type { Organization, Session, User } from '@clerk/clerk-sdk-node';
import { ClerkJWTClaims, ServerSideAuth } from '@clerk/types';
import { GetServerSidePropsContext } from 'next';
export declare type Awaited<T> = T extends PromiseLike<infer U> ? U : T;
export declare type WithServerSideAuthOptions = {
    loadUser?: boolean;
    loadSession?: boolean;
    loadOrg?: boolean;
    jwtKey?: string;
    authorizedParties?: string[];
};
export declare type WithServerSideAuthCallback<Return, Options> = (context: ContextWithAuth<Options>) => Return;
export declare type WithServerSideAuthResult<CallbackReturn> = (context: GetServerSidePropsContext) => Promise<Awaited<CallbackReturn>>;
export declare type AuthData = {
    sessionId: string | null;
    session: Session | undefined | null;
    userId: string | null;
    user: User | undefined | null;
    organization: Organization | undefined | null;
    getToken: (...args: any) => Promise<string | null>;
    claims: ClerkJWTClaims | null;
};
export declare type ContextWithAuth<Options extends WithServerSideAuthOptions = any> = GetServerSidePropsContext & {
    req: RequestWithAuth<Options>;
};
export declare type RequestWithAuth<Options extends WithServerSideAuthOptions = any> = GetServerSidePropsContext['req'] & {
    auth: ServerSideAuth;
} & (Options extends {
    loadSession: true;
} ? {
    session: Session | null;
} : {}) & (Options extends {
    loadUser: true;
} ? {
    user: User | null;
} : {}) & (Options extends {
    loadOrg: true;
} ? {
    organization: Organization | null;
} : {});
//# sourceMappingURL=types.d.ts.map