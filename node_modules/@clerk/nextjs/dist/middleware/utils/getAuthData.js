"use strict";
exports.__esModule = true;
exports.getAuthData = void 0;
var tslib_1 = require("tslib");
var backend_core_1 = require("@clerk/backend-core");
var clerk_sdk_node_1 = tslib_1.__importStar(require("@clerk/clerk-sdk-node"));
/**
 * @internal
 */
function getAuthData(ctx, opts) {
    var _a;
    if (opts === void 0) { opts = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _b, headers, cookies, loadSession, loadUser, loadOrg, jwtKey, authorizedParties, cookieToken, headerToken, _c, status_1, sessionClaims, interstitial, errorReason, sessionId, userId, organizationId, getToken, _d, user, session, organization, err_1;
        return tslib_1.__generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = ctx.req, headers = _b.headers, cookies = _b.cookies;
                    loadSession = opts.loadSession, loadUser = opts.loadUser, loadOrg = opts.loadOrg, jwtKey = opts.jwtKey, authorizedParties = opts.authorizedParties;
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 4, , 5]);
                    cookieToken = cookies['__session'];
                    headerToken = (_a = headers.authorization) === null || _a === void 0 ? void 0 : _a.replace('Bearer ', '');
                    return [4 /*yield*/, clerk_sdk_node_1["default"].base.getAuthState({
                            cookieToken: cookieToken,
                            headerToken: headerToken,
                            clientUat: cookies['__client_uat'],
                            origin: headers.origin,
                            host: headers.host,
                            forwardedPort: headers['x-forwarded-port'],
                            forwardedHost: headers['x-forwarded-host'],
                            referrer: headers.referer,
                            userAgent: headers['user-agent'],
                            fetchInterstitial: function () { return clerk_sdk_node_1["default"].fetchInterstitial(); },
                            jwtKey: jwtKey,
                            authorizedParties: authorizedParties
                        })];
                case 2:
                    _c = _e.sent(), status_1 = _c.status, sessionClaims = _c.sessionClaims, interstitial = _c.interstitial, errorReason = _c.errorReason;
                    errorReason && ctx.res.setHeader('Auth-Result', errorReason);
                    if (status_1 === backend_core_1.AuthStatus.Interstitial) {
                        ctx.res.writeHead(401, { 'Content-Type': 'text/html' });
                        ctx.res.end(interstitial);
                        return [2 /*return*/, null];
                    }
                    if (status_1 === backend_core_1.AuthStatus.SignedOut || !sessionClaims) {
                        return [2 /*return*/, (0, backend_core_1.createSignedOutState)()];
                    }
                    sessionId = sessionClaims.sid;
                    userId = sessionClaims.sub;
                    organizationId = sessionClaims.org_id;
                    getToken = (0, backend_core_1.createGetToken)({
                        sessionId: sessionId,
                        headerToken: headerToken,
                        cookieToken: cookieToken,
                        fetcher: function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            return clerk_sdk_node_1.sessions.getToken.apply(clerk_sdk_node_1.sessions, args);
                        }
                    });
                    return [4 /*yield*/, Promise.all([
                            loadUser ? clerk_sdk_node_1.users.getUser(userId) : Promise.resolve(undefined),
                            loadSession ? clerk_sdk_node_1.sessions.getSession(sessionId) : Promise.resolve(undefined),
                            loadOrg && organizationId ? clerk_sdk_node_1.organizations.getOrganization({ organizationId: organizationId }) : Promise.resolve(undefined),
                        ])];
                case 3:
                    _d = _e.sent(), user = _d[0], session = _d[1], organization = _d[2];
                    return [2 /*return*/, { sessionId: sessionId, userId: userId, user: user, session: session, organization: organization, getToken: getToken, claims: sessionClaims }];
                case 4:
                    err_1 = _e.sent();
                    return [2 /*return*/, (0, backend_core_1.createSignedOutState)()];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.getAuthData = getAuthData;
//# sourceMappingURL=getAuthData.js.map