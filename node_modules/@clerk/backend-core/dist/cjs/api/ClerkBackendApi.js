"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClerkBackendAPI = void 0;
const tslib_1 = require("tslib");
const snakecase_keys_1 = tslib_1.__importDefault(require("snakecase-keys"));
const path_1 = require("../util/path");
const endpoints_1 = require("./endpoints");
const errors_1 = require("./errors");
const Deserializer_1 = require("./resources/Deserializer");
const DEFAULT_API_KEY = process.env.CLERK_API_KEY || '';
const DEFAULT_API_URL = process.env.CLERK_API_URL || 'https://api.clerk.dev';
const DEFAULT_API_VERSION = process.env.CLERK_API_VERSION || 'v1';
const INTERSTITIAL_URL = `${DEFAULT_API_URL}/${DEFAULT_API_VERSION}/internal/interstitial`;
class ClerkBackendAPI {
    constructor(options) {
        this.options = options;
        const { apiClient, apiKey = DEFAULT_API_KEY, apiUrl = DEFAULT_API_URL, apiVersion = DEFAULT_API_VERSION, libName, libVersion, } = options;
        if (!apiClient) {
            throw Error(errors_1.MISSING_API_CLIENT_ERROR);
        }
        this.apiClient = apiClient;
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
        this.apiVersion = apiVersion;
        this.userAgent = `${libName}@${libVersion}`;
    }
    async request(requestOptions) {
        if (!this.apiKey) {
            throw Error(errors_1.MISSING_API_KEY);
        }
        const { path, method } = requestOptions;
        const url = (0, path_1.joinPaths)(this.apiUrl, this.apiVersion, path);
        const newRequestOptions = { method, url };
        newRequestOptions.queryParams = (0, snakecase_keys_1.default)({
            ...this.getDefaultQueryParams(),
            ...requestOptions.queryParams,
        });
        newRequestOptions.headerParams = {
            ...this.getDefaultHeadersParams(),
            ...requestOptions.headerParams,
        };
        newRequestOptions.bodyParams = (0, snakecase_keys_1.default)({
            ...this.getDefaultBodyParams(),
            ...requestOptions.bodyParams,
        }, { deep: false });
        const data = await this.apiClient.request(newRequestOptions);
        return (0, Deserializer_1.deserialize)(data);
    }
    fetchInterstitial() {
        return this.apiClient.request({
            url: INTERSTITIAL_URL,
            method: 'GET',
            headerParams: {
                ...this.getDefaultHeadersParams(),
                'Content-Type': 'text/html',
            },
        });
    }
    getDefaultQueryParams() {
        return {};
    }
    getDefaultHeadersParams() {
        return {
            Authorization: `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'User-Agent': this.userAgent,
            'X-Clerk-SDK': this.userAgent,
        };
    }
    getDefaultBodyParams() {
        return {};
    }
    get allowlistIdentifiers() {
        if (!this._allowlistIdentifierAPI) {
            this._allowlistIdentifierAPI = new endpoints_1.AllowlistIdentifierAPI(this);
        }
        return this._allowlistIdentifierAPI;
    }
    get clients() {
        if (!this._clientAPI) {
            this._clientAPI = new endpoints_1.ClientAPI(this);
        }
        return this._clientAPI;
    }
    get emails() {
        if (!this._emailAPI) {
            this._emailAPI = new endpoints_1.EmailAPI(this);
        }
        return this._emailAPI;
    }
    get invitations() {
        if (!this._invitationAPI) {
            this._invitationAPI = new endpoints_1.InvitationAPI(this);
        }
        return this._invitationAPI;
    }
    get organizations() {
        if (!this._organizationAPI) {
            this._organizationAPI = new endpoints_1.OrganizationAPI(this);
        }
        return this._organizationAPI;
    }
    get redirectUrls() {
        if (!this._redirectUrlAPI) {
            this._redirectUrlAPI = new endpoints_1.RedirectUrlAPI(this);
        }
        return this._redirectUrlAPI;
    }
    get sessions() {
        if (!this._sessionAPI) {
            this._sessionAPI = new endpoints_1.SessionAPI(this);
        }
        return this._sessionAPI;
    }
    get signInTokens() {
        if (!this._signInTokenAPI) {
            this._signInTokenAPI = new endpoints_1.SignInTokenAPI(this);
        }
        return this._signInTokenAPI;
    }
    get smsMessages() {
        if (!this._smsMessageAPI) {
            this._smsMessageAPI = new endpoints_1.SMSMessageAPI(this);
        }
        return this._smsMessageAPI;
    }
    get users() {
        if (!this._userAPI) {
            this._userAPI = new endpoints_1.UserAPI(this);
        }
        return this._userAPI;
    }
}
exports.ClerkBackendAPI = ClerkBackendAPI;
