"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAPI = void 0;
const path_1 = require("../../util/path");
const AbstractApi_1 = require("./AbstractApi");
const basePath = '/users';
class UserAPI extends AbstractApi_1.AbstractAPI {
    async getUserList(params = {}) {
        return this.APIClient.request({
            method: 'GET',
            path: basePath,
            queryParams: params,
        });
    }
    async getUser(userId) {
        this.requireId(userId);
        return this.APIClient.request({
            method: 'GET',
            path: (0, path_1.joinPaths)(basePath, userId),
        });
    }
    async createUser(params) {
        return this.APIClient.request({
            method: 'POST',
            path: basePath,
            bodyParams: params,
        });
    }
    async updateUser(userId, params = {}) {
        this.requireId(userId);
        return this.APIClient.request({
            method: 'PATCH',
            path: (0, path_1.joinPaths)(basePath, userId),
            bodyParams: params,
        });
    }
    async updateUserMetadata(userId, params) {
        this.requireId(userId);
        return this.APIClient.request({
            method: 'PATCH',
            path: (0, path_1.joinPaths)(basePath, userId, 'metadata'),
            bodyParams: params,
        });
    }
    async deleteUser(userId) {
        this.requireId(userId);
        return this.APIClient.request({
            method: 'DELETE',
            path: (0, path_1.joinPaths)(basePath, userId),
        });
    }
    async getCount(params = {}) {
        return this.APIClient.request({
            method: 'GET',
            path: (0, path_1.joinPaths)(basePath, 'count'),
            queryParams: params,
        });
    }
    async getUserOauthAccessToken(userId, provider) {
        this.requireId(userId);
        return this.APIClient.request({
            method: 'GET',
            path: (0, path_1.joinPaths)(basePath, userId, 'oauth_access_tokens', provider),
        });
    }
    async disableUserMFA(userId) {
        this.requireId(userId);
        return this.APIClient.request({
            method: 'DELETE',
            path: (0, path_1.joinPaths)(basePath, userId, 'mfa'),
        });
    }
}
exports.UserAPI = UserAPI;
