import { User } from '../resources/User';
import { AbstractAPI } from './AbstractApi';
declare type UserCountParams = {
    emailAddress?: string[];
    phoneNumber?: string[];
    username?: string[];
    web3Wallet?: string[];
    query?: string;
    userId?: string[];
};
declare type UserListParams = UserCountParams & {
    limit?: number;
    offset?: number;
    orderBy?: 'created_at' | 'updated_at' | '+created_at' | '+updated_at' | '-created_at' | '-updated_at';
};
declare type UserMetadataParams = {
    publicMetadata?: Record<string, unknown>;
    privateMetadata?: Record<string, unknown>;
    unsafeMetadata?: Record<string, unknown>;
};
declare type CreateUserParams = {
    externalId?: string;
    emailAddress?: string[];
    phoneNumber?: string[];
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    skipPasswordChecks?: boolean;
    skipPasswordRequirement?: boolean;
    totpSecret?: string;
} & UserMetadataParams;
interface UpdateUserParams extends UserMetadataParams {
    firstName?: string;
    lastName?: string;
    username?: string;
    password?: string;
    primaryEmailAddressID?: string;
    primaryPhoneNumberID?: string;
}
export declare class UserAPI extends AbstractAPI {
    getUserList(params?: UserListParams): Promise<User[]>;
    getUser(userId: string): Promise<User>;
    createUser(params: CreateUserParams): Promise<User>;
    updateUser(userId: string, params?: UpdateUserParams): Promise<User>;
    updateUserMetadata(userId: string, params: UserMetadataParams): Promise<User>;
    deleteUser(userId: string): Promise<User>;
    getCount(params?: UserListParams): Promise<number>;
    getUserOauthAccessToken(userId: string, provider: `oauth_${string}`): Promise<User>;
    disableUserMFA(userId: string): Promise<User>;
}
export {};
//# sourceMappingURL=UserApi.d.ts.map