"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationAPI = void 0;
const path_1 = require("../../util/path");
const AbstractApi_1 = require("./AbstractApi");
const basePath = '/organizations';
class OrganizationAPI extends AbstractApi_1.AbstractAPI {
    async getOrganizationList(params) {
        return this.APIClient.request({
            method: 'GET',
            path: basePath,
            queryParams: params,
        });
    }
    async createOrganization(params) {
        return this.APIClient.request({
            method: 'POST',
            path: basePath,
            bodyParams: params,
        });
    }
    async getOrganization(params) {
        const organizationIdOrSlug = 'organizationId' in params ? params.organizationId : params.slug;
        this.requireId(organizationIdOrSlug);
        return this.APIClient.request({
            method: 'GET',
            path: (0, path_1.joinPaths)(basePath, organizationIdOrSlug),
        });
    }
    async updateOrganization(organizationId, params) {
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'PATCH',
            path: (0, path_1.joinPaths)(basePath, organizationId),
            bodyParams: params,
        });
    }
    async updateOrganizationMetadata(organizationId, params) {
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'PATCH',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'metadata'),
            bodyParams: params,
        });
    }
    async deleteOrganization(organizationId) {
        return this.APIClient.request({
            method: 'DELETE',
            path: (0, path_1.joinPaths)(basePath, organizationId),
        });
    }
    async getOrganizationMembershipList(params) {
        const { organizationId, limit, offset } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'GET',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'memberships'),
            queryParams: { limit, offset },
        });
    }
    async createOrganizationMembership(params) {
        const { organizationId, userId, role } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'POST',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'memberships'),
            bodyParams: {
                userId,
                role,
            },
        });
    }
    async updateOrganizationMembership(params) {
        const { organizationId, userId, role } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'PATCH',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'memberships', userId),
            bodyParams: {
                role,
            },
        });
    }
    async updateOrganizationMembershipMetadata(params) {
        const { organizationId, userId, publicMetadata, privateMetadata } = params;
        return this.APIClient.request({
            method: 'PATCH',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'memberships', userId, 'metadata'),
            bodyParams: {
                publicMetadata,
                privateMetadata,
            },
        });
    }
    async deleteOrganizationMembership(params) {
        const { organizationId, userId } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'DELETE',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'memberships', userId),
        });
    }
    async getPendingOrganizationInvitationList(params) {
        const { organizationId, limit, offset } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'GET',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'invitations', 'pending'),
            queryParams: { limit, offset },
        });
    }
    async createOrganizationInvitation(params) {
        const { organizationId, ...bodyParams } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'POST',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'invitations'),
            bodyParams: { ...bodyParams },
        });
    }
    async revokeOrganizationInvitation(params) {
        const { organizationId, invitationId, requestingUserId } = params;
        this.requireId(organizationId);
        return this.APIClient.request({
            method: 'POST',
            path: (0, path_1.joinPaths)(basePath, organizationId, 'invitations', invitationId, 'revoke'),
            bodyParams: {
                requestingUserId,
            },
        });
    }
}
exports.OrganizationAPI = OrganizationAPI;
