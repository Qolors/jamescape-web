import { ClerkJWTClaims } from '@clerk/types';
import { AuthErrorReason } from './errors';
export declare enum AuthStatus {
    SignedIn = "Signed in",
    SignedOut = "Signed out",
    Interstitial = "Interstitial"
}
declare type Session = {
    id?: string;
    userId?: string;
};
export declare type VerifySessionTokenOptions = {
    authorizedParties?: string[];
    jwtKey?: string;
};
export declare type BuildAuthenticatedStateOptions = {
    jwtKey?: string;
    authorizedParties?: string[];
    fetchInterstitial: () => Promise<string>;
    tokenType: TokenType;
};
export declare type TokenType = 'cookie' | 'header';
export declare type AuthState = {
    status: AuthStatus;
    session?: Session;
    interstitial?: string;
    sessionClaims?: ClerkJWTClaims;
    errorReason?: AuthErrorReason;
};
export declare type AuthStateParams = {
    cookieToken?: string;
    clientUat?: string;
    headerToken?: string | null;
    origin?: string | null;
    host: string;
    forwardedHost?: string | null;
    forwardedPort?: string | null;
    forwardedProto?: string | null;
    referrer?: string | null;
    userAgent?: string | null;
    authorizedParties?: string[];
    fetchInterstitial: () => Promise<string>;
    jwtKey?: string;
};
export {};
//# sourceMappingURL=core.d.ts.map