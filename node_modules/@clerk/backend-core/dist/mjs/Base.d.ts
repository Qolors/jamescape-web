import type { ClerkJWTClaims } from '@clerk/types';
import type { CryptoKey as PeculiarCryptoKey } from '@peculiar/webcrypto';
import { AuthState, AuthStateParams, BuildAuthenticatedStateOptions, JWT, VerifySessionTokenOptions } from './types';
export declare const API_KEY: string;
declare type ImportKeyFunction = (...args: any[]) => Promise<CryptoKey | PeculiarCryptoKey>;
declare type LoadCryptoKeyFunction = (token: string) => Promise<CryptoKey>;
declare type DecodeBase64Function = (base64Encoded: string) => string;
declare type VerifySignatureFunction = (...args: any[]) => Promise<boolean>;
export declare class Base {
    importKeyFunction: ImportKeyFunction;
    verifySignatureFunction: VerifySignatureFunction;
    decodeBase64Function: DecodeBase64Function;
    loadCryptoKeyFunction?: LoadCryptoKeyFunction;
    constructor(importKeyFunction: ImportKeyFunction, verifySignatureFunction: VerifySignatureFunction, decodeBase64Function: DecodeBase64Function, loadCryptoKeyFunction?: LoadCryptoKeyFunction);
    verifySessionToken: (token: string, { authorizedParties, jwtKey }?: VerifySessionTokenOptions) => Promise<ClerkJWTClaims>;
    loadCryptoKey: (key?: string | undefined) => Promise<CryptoKey>;
    decodeJwt: (token: string) => JWT;
    verifyJwtSignature: (key: CryptoKey, token: string) => Promise<void>;
    verifyJwt: (key: CryptoKey, token: string) => Promise<ClerkJWTClaims>;
    getAuthState: ({ cookieToken, clientUat, headerToken, origin, host, forwardedHost, forwardedPort, forwardedProto, referrer, userAgent, authorizedParties, fetchInterstitial, jwtKey, }: AuthStateParams) => Promise<AuthState>;
    buildAuthenticatedState: (token: string, { authorizedParties, jwtKey, fetchInterstitial, tokenType }: BuildAuthenticatedStateOptions) => Promise<AuthState>;
}
export {};
//# sourceMappingURL=Base.d.ts.map