import { Organization, OrganizationInvitation, OrganizationMembership } from '../resources';
import { OrganizationMembershipRole } from '../resources/Enums';
import { AbstractAPI } from './AbstractApi';
declare type MetadataParams = {
    publicMetadata?: Record<string, unknown>;
    privateMetadata?: Record<string, unknown>;
};
declare type GetOrganizationListParams = {
    limit?: number;
    offset?: number;
};
declare type CreateParams = {
    name: string;
    slug?: string;
    createdBy: string;
} & MetadataParams;
declare type GetOrganizationParams = {
    organizationId: string;
} | {
    slug: string;
};
declare type UpdateParams = {
    name?: string;
};
declare type UpdateMetadataParams = MetadataParams;
declare type GetOrganizationMembershipListParams = {
    organizationId: string;
    limit?: number;
    offset?: number;
};
declare type CreateOrganizationMembershipParams = {
    organizationId: string;
    userId: string;
    role: OrganizationMembershipRole;
};
declare type UpdateOrganizationMembershipParams = CreateOrganizationMembershipParams;
declare type UpdateOrganizationMembershipMetadataParams = {
    organizationId: string;
    userId: string;
} & MetadataParams;
declare type DeleteOrganizationMembershipParams = {
    organizationId: string;
    userId: string;
};
declare type CreateOrganizationInvitationParams = {
    organizationId: string;
    inviterUserId: string;
    emailAddress: string;
    role: OrganizationMembershipRole;
    redirectUrl?: string;
};
declare type GetPendingOrganizationInvitationListParams = {
    organizationId: string;
    limit?: number;
    offset?: number;
};
declare type RevokeOrganizationInvitationParams = {
    organizationId: string;
    invitationId: string;
    requestingUserId: string;
};
export declare class OrganizationAPI extends AbstractAPI {
    getOrganizationList(params?: GetOrganizationListParams): Promise<Organization[]>;
    createOrganization(params: CreateParams): Promise<Organization>;
    getOrganization(params: GetOrganizationParams): Promise<Organization>;
    updateOrganization(organizationId: string, params: UpdateParams): Promise<Organization>;
    updateOrganizationMetadata(organizationId: string, params: UpdateMetadataParams): Promise<Organization>;
    deleteOrganization(organizationId: string): Promise<Organization>;
    getOrganizationMembershipList(params: GetOrganizationMembershipListParams): Promise<OrganizationMembership[]>;
    createOrganizationMembership(params: CreateOrganizationMembershipParams): Promise<OrganizationMembership>;
    updateOrganizationMembership(params: UpdateOrganizationMembershipParams): Promise<OrganizationMembership>;
    updateOrganizationMembershipMetadata(params: UpdateOrganizationMembershipMetadataParams): Promise<OrganizationMembership>;
    deleteOrganizationMembership(params: DeleteOrganizationMembershipParams): Promise<OrganizationMembership>;
    getPendingOrganizationInvitationList(params: GetPendingOrganizationInvitationListParams): Promise<OrganizationInvitation[]>;
    createOrganizationInvitation(params: CreateOrganizationInvitationParams): Promise<OrganizationInvitation>;
    revokeOrganizationInvitation(params: RevokeOrganizationInvitationParams): Promise<OrganizationInvitation>;
}
export {};
//# sourceMappingURL=OrganizationApi.d.ts.map