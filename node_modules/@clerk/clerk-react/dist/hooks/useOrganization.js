"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOrganization = void 0;
const tslib_1 = require("tslib");
const swr_1 = tslib_1.__importDefault(require("swr"));
const IsomorphicClerkContext_1 = require("../contexts/IsomorphicClerkContext");
const OrganizationContext_1 = require("../contexts/OrganizationContext");
const SessionContext_1 = require("../contexts/SessionContext");
const useOrganization = ({ invitationList: invitationListParams, membershipList: membershipListParams, } = {}) => {
    const { organization, lastOrganizationMember, lastOrganizationInvitation } = (0, OrganizationContext_1.useOrganizationContext)();
    const session = (0, SessionContext_1.useSessionContext)();
    const isomorphicClerk = (0, IsomorphicClerkContext_1.useIsomorphicClerkContext)();
    const clerk = isomorphicClerk;
    const shouldFetch = isomorphicClerk.loaded && session && organization;
    // Some gymnastics to adhere to the rules of hooks
    // We need to make sure useSWR is called on every render
    const pendingInvitations = !isomorphicClerk.loaded
        ? () => []
        : () => { var _a; return (_a = clerk.organization) === null || _a === void 0 ? void 0 : _a.getPendingInvitations(invitationListParams); };
    const currentOrganizationMemberships = !isomorphicClerk.loaded
        ? () => []
        : () => { var _a; return (_a = clerk.organization) === null || _a === void 0 ? void 0 : _a.getMemberships(membershipListParams); };
    const { data: invitationList, isValidating: isInvitationsLoading } = (0, swr_1.default)(shouldFetch && invitationListParams
        ? composeOrganizationResourcesUpdateKey(organization, lastOrganizationInvitation, 'invitations')
        : null, pendingInvitations);
    const { data: membershipList, isValidating: isMembershipsLoading } = (0, swr_1.default)(shouldFetch && membershipListParams
        ? composeOrganizationResourcesUpdateKey(organization, lastOrganizationMember, 'memberships')
        : null, currentOrganizationMemberships);
    if (organization === undefined) {
        return {
            isLoaded: false,
            organization: undefined,
            invitationList: undefined,
            membershipList: undefined,
            membership: undefined,
        };
    }
    if (organization === null) {
        return {
            isLoaded: true,
            organization: null,
            invitationList: null,
            membershipList: null,
            membership: null,
        };
    }
    /** In SSR context we include only the organization object when loadOrg is set to true. */
    if (!isomorphicClerk.loaded && organization) {
        return {
            isLoaded: true,
            organization,
            invitationList: undefined,
            membershipList: undefined,
            membership: undefined,
        };
    }
    return {
        isLoaded: !isMembershipsLoading && !isInvitationsLoading,
        organization,
        membershipList,
        membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),
        invitationList,
    };
};
exports.useOrganization = useOrganization;
function getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {
    return organizationMemberships.find(organizationMembership => organizationMembership.organization.id === activeOrganizationId);
}
function composeOrganizationResourcesUpdateKey(organization, resource = null, resourceType) {
    return `${organization.id}${resource === null || resource === void 0 ? void 0 : resource.id}${resource === null || resource === void 0 ? void 0 : resource.updatedAt}${resourceType}`;
}
//# sourceMappingURL=useOrganization.js.map